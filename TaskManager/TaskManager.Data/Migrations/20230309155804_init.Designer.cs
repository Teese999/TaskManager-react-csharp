// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

#nullable disable

namespace TaskManager.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230309155804_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb2dd56-6092-42f8-b468-8dde8fe35412"),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5850),
                            ProjectName = "TestName1",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5880)
                        },
                        new
                        {
                            Id = new Guid("3bd48ebf-e30c-4888-8d59-26d0bb4650e5"),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5890),
                            ProjectName = "TestName2",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5890)
                        },
                        new
                        {
                            Id = new Guid("fb4517a5-70bc-4f97-8e49-281e9d9da2c6"),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5900),
                            ProjectName = "TestName3",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5900)
                        },
                        new
                        {
                            Id = new Guid("4ea36732-f7aa-483f-ba7f-87027b5ebf50"),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5900),
                            ProjectName = "TestName4",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5910)
                        });
                });

            modelBuilder.Entity("TaskManager.Data.Models.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancelDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a602b4dd-0861-4027-b02b-0192199c6109"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5950),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5950),
                            ProjectId = new Guid("dbb2dd56-6092-42f8-b468-8dde8fe35412"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5940),
                            TaskName = "TaskName1",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5950)
                        },
                        new
                        {
                            Id = new Guid("dac10e63-c5c7-4800-83d8-796aa66712d5"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5960),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5960),
                            ProjectId = new Guid("dbb2dd56-6092-42f8-b468-8dde8fe35412"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5960),
                            TaskName = "TaskName2",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5960)
                        },
                        new
                        {
                            Id = new Guid("cdf9d409-7e1e-4a24-ac39-37221af7d81f"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5970),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5970),
                            ProjectId = new Guid("3bd48ebf-e30c-4888-8d59-26d0bb4650e5"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5970),
                            TaskName = "TaskName3",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5970)
                        },
                        new
                        {
                            Id = new Guid("bf7cff51-3b51-405c-9f84-761087b8e160"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5980),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5980),
                            ProjectId = new Guid("3bd48ebf-e30c-4888-8d59-26d0bb4650e5"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5980),
                            TaskName = "TaskName4",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5980)
                        },
                        new
                        {
                            Id = new Guid("2833c704-ea71-4f2c-990f-11f1d09dbcc0"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5990),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5990),
                            ProjectId = new Guid("fb4517a5-70bc-4f97-8e49-281e9d9da2c6"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5990),
                            TaskName = "TaskName5",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(5990)
                        },
                        new
                        {
                            Id = new Guid("b4e9b2a5-1fa7-4e01-ac81-0d2f5e460d88"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6000),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6000),
                            ProjectId = new Guid("fb4517a5-70bc-4f97-8e49-281e9d9da2c6"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6000),
                            TaskName = "TaskName6",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6000)
                        },
                        new
                        {
                            Id = new Guid("bddb819c-e7f2-4aa8-9363-b378daa5c439"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6010),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6010),
                            ProjectId = new Guid("4ea36732-f7aa-483f-ba7f-87027b5ebf50"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6010),
                            TaskName = "TaskName7",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6010)
                        },
                        new
                        {
                            Id = new Guid("11034b68-b462-49a3-8dbf-123de26f9af6"),
                            CancelDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6020),
                            CreateDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6020),
                            ProjectId = new Guid("4ea36732-f7aa-483f-ba7f-87027b5ebf50"),
                            StartDate = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6020),
                            TaskName = "TaskName8",
                            UpdateTime = new DateTime(2023, 3, 9, 18, 58, 4, 301, DateTimeKind.Local).AddTicks(6020)
                        });
                });

            modelBuilder.Entity("TaskManager.Data.Models.TaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CommentType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c81bd951-b19b-4123-948a-619d5d634152"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("a602b4dd-0861-4027-b02b-0192199c6109")
                        },
                        new
                        {
                            Id = new Guid("dec822f7-d469-4746-ab44-a33211feaf7f"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("a602b4dd-0861-4027-b02b-0192199c6109")
                        },
                        new
                        {
                            Id = new Guid("8abbf689-8dcf-4a0e-8215-97b90a220e59"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("dac10e63-c5c7-4800-83d8-796aa66712d5")
                        },
                        new
                        {
                            Id = new Guid("6b715346-2b45-40d1-890c-62b93e2b6ce5"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("dac10e63-c5c7-4800-83d8-796aa66712d5")
                        },
                        new
                        {
                            Id = new Guid("a8b09fcf-7618-4345-8490-55d21b432f04"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("cdf9d409-7e1e-4a24-ac39-37221af7d81f")
                        },
                        new
                        {
                            Id = new Guid("d38e258e-31b9-430d-bd22-d48fc3d28d99"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("cdf9d409-7e1e-4a24-ac39-37221af7d81f")
                        },
                        new
                        {
                            Id = new Guid("179d0711-89e7-422a-8535-7ceefecbc900"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("bf7cff51-3b51-405c-9f84-761087b8e160")
                        },
                        new
                        {
                            Id = new Guid("1e9fee81-1cf3-4f93-9180-761220c987a5"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("bf7cff51-3b51-405c-9f84-761087b8e160")
                        },
                        new
                        {
                            Id = new Guid("4eba2480-bfa5-4dca-9fc3-f2052ff6de24"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("2833c704-ea71-4f2c-990f-11f1d09dbcc0")
                        },
                        new
                        {
                            Id = new Guid("a5f655f2-7605-445c-a151-312ec8977981"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("2833c704-ea71-4f2c-990f-11f1d09dbcc0")
                        },
                        new
                        {
                            Id = new Guid("144508c7-0e75-4f1e-bc30-90be8063ec9c"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("b4e9b2a5-1fa7-4e01-ac81-0d2f5e460d88")
                        },
                        new
                        {
                            Id = new Guid("0669acd7-e12f-4993-a234-ca3faf4d3e7d"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("b4e9b2a5-1fa7-4e01-ac81-0d2f5e460d88")
                        },
                        new
                        {
                            Id = new Guid("ec8018ac-fe83-48cd-9f18-a5560a010d5b"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("bddb819c-e7f2-4aa8-9363-b378daa5c439")
                        },
                        new
                        {
                            Id = new Guid("11229f2d-a041-44b6-b6d0-2aab38e23f21"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("bddb819c-e7f2-4aa8-9363-b378daa5c439")
                        },
                        new
                        {
                            Id = new Guid("f1cd4363-0e47-47ea-b66f-86f108ca7db0"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("11034b68-b462-49a3-8dbf-123de26f9af6")
                        },
                        new
                        {
                            Id = new Guid("e2e969d9-5309-410c-8c4d-bef13f724a89"),
                            CommentType = (byte)1,
                            Content = new byte[] { 1 },
                            TaskId = new Guid("11034b68-b462-49a3-8dbf-123de26f9af6")
                        });
                });

            modelBuilder.Entity("TaskManager.Data.Models.ProjectTask", b =>
                {
                    b.HasOne("TaskManager.Data.Models.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Data.Models.TaskComment", b =>
                {
                    b.HasOne("TaskManager.Data.Models.ProjectTask", null)
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Data.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManager.Data.Models.ProjectTask", b =>
                {
                    b.Navigation("TaskComments");
                });
#pragma warning restore 612, 618
        }
    }
}
